Nonterminals useless in grammar

   Function
   Declaration_loop
   Declaration
   Statement
   Statement_loop
   Bool-Expr
   Bool-Expr-loop
   Relation-And-Expr
   Relation-And-Expr-loop
   Relation-Expr
   Comp
   Expression
   Expression_loop
   Multiplicative-Expr
   Multiplicative-Expr-loop
   Term
   Var
   Ident


Terminals unused in grammar

   IDENT
   NUMBER
   FUNCTION
   BEGIN_PARAMS
   END_PARAMS
   BEGIN_LOCALS
   END_LOCALS
   BEGIN_BODY
   END_BODY
   INTEGER
   ARRAY
   OF
   IF
   THEN
   ENDIF
   ELSE
   WHILE
   DO
   FOR
   BEGINLOOP
   ENDLOOP
   CONTINUE
   READ
   WRITE
   TRUE
   FALSE
   RETURN
   SEMICOLON
   COLON
   COMMA
   L_PAREN
   R_PAREN
   L_SQUARE_BRACKET
   R_SQUARE_BRACKET
   AND
   OR
   SUB
   ADD
   MULT
   DIV
   MOD
   EQ
   NEQ
   LT
   GT
   LTE
   GTE
   ASSIGN
   NOT
   UMINUS


Rules useless in grammar

    2 prog_start: Function prog_start

    3 Function: FUNCTION Ident SEMICOLON BEGIN_PARAMS Declaration_loop SEMICOLON END_PARAMS BEGIN_LOCALS Declaration_loop SEMICOLON END_LOCALS BEGIN_BODY Statement SEMICOLON END_BODY

    4 Declaration_loop: Declaration SEMICOLON Declaration_loop

    5 Declaration: %empty
    6            | Ident COLON INTEGER
    7            | Ident COMMA Ident COLON INTEGER
    8            | Ident COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER
    9            | Ident COMMA Ident COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER
   10            | Declaration SEMICOLON Declaration

   11 Statement: Var ASSIGN Expression
   12          | IF Bool-Expr THEN Statement_loop SEMICOLON ENDIF
   13          | IF Bool-Expr THEN Statement_loop SEMICOLON ELSE Statement_loop SEMICOLON ENDIF
   14          | WHILE Bool-Expr BEGINLOOP Statement_loop SEMICOLON ENDLOOP
   15          | DO BEGINLOOP Statement_loop SEMICOLON ENDLOOP WHILE Bool-Expr
   16          | FOR Var ASSIGN NUMBER SEMICOLON Bool-Expr SEMICOLON Var ASSIGN Expression BEGINLOOP Statement_loop SEMICOLON ENDLOOP
   17          | READ Var
   18          | WRITE Var
   19          | CONTINUE
   20          | RETURN Expression

   21 Statement_loop: Statement SEMICOLON Statement_loop
   22               | Statement SEMICOLON

   23 Bool-Expr: Relation-And-Expr Bool-Expr-loop

   24 Bool-Expr-loop: OR Relation-And-Expr Bool-Expr-loop
   25               | %empty

   26 Relation-And-Expr: Relation-Expr Relation-And-Expr-loop

   27 Relation-And-Expr-loop: AND Relation-Expr Relation-And-Expr-loop
   28                       | %empty

   29 Relation-Expr: Expression Comp Expression
   30              | TRUE
   31              | FALSE
   32              | L_PAREN Bool-Expr R_PAREN
   33              | NOT Expression Comp Expression
   34              | NOT TRUE
   35              | NOT FALSE
   36              | NOT L_PAREN Bool-Expr R_PAREN

   37 Comp: EQ
   38     | NEQ
   39     | LT
   40     | GT
   41     | LTE
   42     | GTE

   43 Expression: %empty
   44           | Multiplicative-Expr
   45           | Multiplicative-Expr SUB Multiplicative-Expr
   46           | Multiplicative-Expr ADD Multiplicative-Expr

   47 Expression_loop: Expression COMMA Expression_loop
   48                | %empty

   49 Multiplicative-Expr: Term Multiplicative-Expr-loop

   50 Multiplicative-Expr-loop: %empty
   51                         | MOD Term Multiplicative-Expr-loop
   52                         | DIV Term Multiplicative-Expr-loop
   53                         | MULT Term Multiplicative-Expr-loop

   54 Term: %empty
   55     | Var
   56     | NUMBER
   57     | L_PAREN Expression R_PAREN
   58     | UMINUS Var
   59     | UMINUS NUMBER
   60     | UMINUS L_PAREN Expression R_PAREN
   61     | Ident L_PAREN Expression_loop R_PAREN

   62 Var: %empty
   63    | Ident
   64    | Ident L_PAREN Expression R_PAREN
   65    | Var COMMA Var

   66 Ident: IDENT


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENT (258)
NUMBER (259)
FUNCTION (260)
BEGIN_PARAMS (261)
END_PARAMS (262)
BEGIN_LOCALS (263)
END_LOCALS (264)
BEGIN_BODY (265)
END_BODY (266)
INTEGER (267)
ARRAY (268)
OF (269)
IF (270)
THEN (271)
ENDIF (272)
ELSE (273)
WHILE (274)
DO (275)
FOR (276)
BEGINLOOP (277)
ENDLOOP (278)
CONTINUE (279)
READ (280)
WRITE (281)
TRUE (282)
FALSE (283)
RETURN (284)
SEMICOLON (285)
COLON (286)
COMMA (287)
L_PAREN (288)
R_PAREN (289)
L_SQUARE_BRACKET (290)
R_SQUARE_BRACKET (291)
AND (292)
OR (293)
SUB (294)
ADD (295)
MULT (296)
DIV (297)
MOD (298)
EQ (299)
NEQ (300)
LT (301)
GT (302)
LTE (303)
GTE (304)
ASSIGN (305)
NOT (306)
UMINUS (307)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
prog_start (54)
    on left: 1, on right: 0


State 0

    0 $accept: . prog_start $end

    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 1


State 1

    0 $accept: prog_start . $end

    $end  shift, and go to state 2


State 2

    0 $accept: prog_start $end .

    $default  accept
